/*Step 7
In order to better visualize how your elements are sized, adding a border can be helpful.

Give your .gallery element a width of 50% and a border set to 5px solid red.

Then give your img elements a width of 100%, padding set to 5px, and a border set to 5px solid blue.*/
/*Step 8
Notice how the blue image border extends beyond the red gallery border. This is due to the way browsers calculate the size of container elements.

The box-sizing property is used to set this behavior. By default, the content-box model is used. With this model, when an element has a specific width, that width is calculated based only on the element's content. Padding and border values get added to the total width, so the element grows to accommodate these values.

Try setting box-sizing to content-box explicitly, with the global * selector. At this point, you will not see any changes, because you are using the default value.*/
/*Step 9
The border-box sizing model does the opposite of content-box. The total width of the element, including padding and border, will be the explicit width set. The content of the element will shrink to make room for the padding and border.

Change the box-sizing property to border-box. Notice how your blue image borders now fit within your red gallery border.*/
* {
   box-sizing: border-box;
 }
 /*Step 12
Remove the margin from your body element, set the font-family to sans-serif, and give it a background-color of #f5f6f7 as the value.*/
body {
   margin: 0;
   font-family: sans-serif;
   background-color: #f5f6f7;
}
/*Step 13
Align your .header text in the center. Make the text uppercase using the text-transform property with uppercase as the value.

Give it a padding of 32px on all sides. Set the background to #0a0a23 and the text to #fff as the color values.

Add a border-bottom with 4px solid #fdb347 as the value.*/
.header {
   text-align: center;
   text-transform: uppercase;
   padding: 32px;
   background-color: #0a0a23;
   color: #fff;
   border-bottom: 4px solid #fdb347;
}
/*Step 14
Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container.

To use it, give an element a display property of flex. This will make the element a flex container. Any direct children of a flex container are called flex items.

Create a .gallery selector and make it a flex container.*/
/*Step 15
Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:

row (default): horizontal axis with flex items from left to right
row-reverse: horizontal axis with flex items from right to left
column: vertical axis with flex items from top to bottom
column-reverse: vertical axis with flex items from bottom to top
Note: The axes and directions will be different depending on the text direction. The values shown are for a left-to-right text direction.

Try the different values to see how they affect the layout.

When you are done, set an explicit flex-direction of row on the .gallery element.*/
/*Step 16
The flex-wrap property determines how your flex items behave when the flex container is too small. Setting it to wrap will allow the items to wrap to the next row or column. nowrap (default) will prevent your items from wrapping and shrink them if needed.

Make it so your flex items wrap to the next row when they run out of space.*/
/*Step 17
The justify-content property determines how the items inside a flex container are positioned along the main axis, affecting their position and the space around them.

Give your .gallery selector a justify-content property with center as the value.*/
.gallery {
   display: flex;
   flex-direction: row;
   flex-wrap: wrap;
   justify-content: center;
}
 /*Step 10
Now that you have figured out your box-sizing approach, you can clean up the CSS you added to see the changes.

Remove your .gallery and img selectors, and all rules within.*/
/*Step 11
Now your images are too big.

Create a .gallery img selector to target them. Give them all a width of 100% and a max-width of 350px.

Also set the height property to 300px to keep your images a uniform size.*/
.gallery img{
   width: 100%;
   max-width: 350px;
   height: 300px;
}