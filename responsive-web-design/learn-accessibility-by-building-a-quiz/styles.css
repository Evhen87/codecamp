body {
   background: #f5f6f7;
   color: #1b1b32;
   font-family: Helvetica;
   margin: 0;
 }
 /*Step 8
Currently, the img is assuming its default size, which is too large. CSS has a max function which returns the largest of a set of comma-separated values. For example:

Example Code
img {
  width: max(250px, 25vw);
}
In the above example, the width of the image will be 250px if the viewport width is less than 1000 pixels. If the viewport width is greater than 1000 pixels, the width of the image will be 25vw. This is because 25vw is equal to 25% of the viewport width.

Scale the image using its id as a selector, and setting the width to be the maximum of 10rem or 18vw.*/
/*Step 9
As described in the freeCodeCamp Style Guide, the logo should retain an aspect ratio of 35 / 4, and have padding around the text.

First, change the background-color to #0a0a23 so you can see the logo. Then, use the aspect-ratio property to set the desired aspect ratio to 35 / 4. Finally, add a padding of 0.4rem all around.*/
/*Step 10
Make the header take up the full width of its parent container, set its height to 50px, and set the background-color to #1b1b32. Then, set the display to use Flexbox.*/
header {
   width: 100%;
   height: 50px;
   background-color: #1b1b32;
   display: flex;
} 
#logo {
   width: max(10rem, 18vw);
   background-color: #0a0a23;
   aspect-ratio: 35 / 4;
   padding: 0.4rem;
}
/*Step 11
Change the h1 font color to #f1be32, and set the font size to min(5vw, 1.2em).*/
h1 {
   color: #f1be32;
   font-size: min(5vw, 1.2em);
}
nav {
   width: 50%;
   max-width: 300px;
   height: 50px;
 }
 /*Step 13
The child combinator selector > is used between selectors to target only elements that match the second selector and are a direct child of the first selector.

This can be helpful when you have deeply nested elements and want to control the scope of your styling.

Use the > selector to target the unordered list elements within the nav elements, and use Flexbox to evenly space the children.*/
nav > ul {
   display: flex;
   justify-content: space-evenly;
}
/*Step 17
Typeface plays an important role in the accessibility of a page. Some fonts are easier to read than others, and this is especially true on low-resolution screens.

Change the font for both the h1 and h2 elements to Verdana, and use another web-safe font in the sans-serif family as a fallback.

Also, add a border-bottom of 4px solid #dfdfe2 to h2 elements to make the sections distinct.*/
h1, h2 {
   font-family: Verdana, sans-serif;
}
h2 {
   border-bottom: 4px solid #dfdfe2;
}
/*Step 34
To prevent unnecessary repetition, target the before pseudo-element of the h3 element, and give it a content property of "Question #".*/
h3::before {
   content: "Question #";
}
/*Step 26
The .sr-only text is still visible. There is a common pattern to visually hide text for only screen readers to read.

This pattern is to set the following CSS properties:

Example Code
position: absolute;
width: 1px;
height: 1px;
overflow: hidden;
clip: rect(0, 0, 0, 0);
clip-path: inset(50%);
white-space: nowrap;
Use the above to define the .sr-only CSS rule.*/
.sr-only {
   position: absolute;
   width: 1px;
   height: 1px;
   overflow: hidden;
   clip: rect(0, 0, 0, 0);
   clip-path: inset(50%);
   white-space: nowrap;
}