body {
   background: #f5f6f7;
   color: #1b1b32;
   font-family: Helvetica;
   margin: 0;
 }
 /*Step 8
Currently, the img is assuming its default size, which is too large. CSS has a max function which returns the largest of a set of comma-separated values. For example:

Example Code
img {
  width: max(250px, 25vw);
}
In the above example, the width of the image will be 250px if the viewport width is less than 1000 pixels. If the viewport width is greater than 1000 pixels, the width of the image will be 25vw. This is because 25vw is equal to 25% of the viewport width.

Scale the image using its id as a selector, and setting the width to be the maximum of 10rem or 18vw.*/
/*Step 9
As described in the freeCodeCamp Style Guide, the logo should retain an aspect ratio of 35 / 4, and have padding around the text.

First, change the background-color to #0a0a23 so you can see the logo. Then, use the aspect-ratio property to set the desired aspect ratio to 35 / 4. Finally, add a padding of 0.4rem all around.*/
/*Step 10
Make the header take up the full width of its parent container, set its height to 50px, and set the background-color to #1b1b32. Then, set the display to use Flexbox.*/
/*Step 48
Tidy up the header, by using Flexbox to put space between the children, and vertically center them.*/
header {
   width: 100%;
   height: 50px;
   background-color: #1b1b32;
   display: flex;
   align-items: center;
   justify-content: space-between;
   top: 0;
} 
#logo {
   width: max(10rem, 18vw);
   background-color: #0a0a23;
   aspect-ratio: 35 / 4;
   padding: 0.4rem;
}
/*Step 11
Change the h1 font color to #f1be32, and set the font size to min(5vw, 1.2em).*/
/*Step 49
When the screen width is small, the h1 does not wrap its text content how it should. Align the text for the h1 element in the center.

Then, give the main padding such that the Student Info section header can be fully seen.*/
h1 {
   color: #f1be32;
   font-size: min(5vw, 1.2em);
   text-align: center;
}
main {
   padding-top: 25px;
}
/*Step 51
Set the width of the section elements to 80% of their parent container. Then, use margins to center the section elements, adding 10px to the bottom margin.

Also, ensure the section elements cannot be larger than 600px in width.*/
section {
   width: 80%;
   max-width: 600px;
   margin: 0 auto 10px;
}
nav {
   width: 50%;
   max-width: 300px;
   height: 50px;
 }
 /*Step 13
The child combinator selector > is used between selectors to target only elements that match the second selector and are a direct child of the first selector.

This can be helpful when you have deeply nested elements and want to control the scope of your styling.

Use the > selector to target the unordered list elements within the nav elements, and use Flexbox to evenly space the children.*/
/*Step 50
On small screens, the unordered list in the navigation bar overflows the right side of the screen.

Fix this by using Flexbox to wrap the ul content. Then, set the following CSS properties to correctly align the text:

Example Code
align-items: center;
padding-inline-start: 0;
margin-block: 0;
height: 100%;*/
nav > ul {
   display: flex;
   justify-content: space-evenly;
   align-items: center;
padding-inline-start: 0;
margin-block: 0;
height: 100%;
flex-wrap: wrap;
}
/*Step 45
Back to styling the page. Select the list elements within the navigation bar, and give them the following styles:

Example Code
color: #dfdfe2;
margin: 0 0.2rem;
padding: 0.2rem;
display: block;*/
nav > ul > li   {
   color: #dfdfe2;
margin: 0 0.2rem;
padding: 0.2rem;
display: block;
}
/*Step 47
To make the navigation buttons look more like typical buttons, remove the underline from the anchor tags.

Then, create a new selector targeting the navigation list elements so that when the cursor hovers over them, the background color and text color are switched, and the cursor becomes a pointer.*/
li > a  {
   text-decoration: none;
}
nav > ul > li:hover  {
   cursor: pointer;
   background-color: #dfdfe2;
   color: #1b1b32;
}
/*Step 46
On the topic of visual accessibility, contrast between elements is a key factor. For example, the contrast between the text and the background of a heading should be at least 4.5:1.

Change the font color of all the anchor elements within the list elements to something with a contrast ratio of at least 7:1.*/
li > a {
   color: inherit;
}
/*Step 17
Typeface plays an important role in the accessibility of a page. Some fonts are easier to read than others, and this is especially true on low-resolution screens.

Change the font for both the h1 and h2 elements to Verdana, and use another web-safe font in the sans-serif family as a fallback.

Also, add a border-bottom of 4px solid #dfdfe2 to h2 elements to make the sections distinct.*/
h1, h2 {
   font-family: Verdana, sans-serif;
}
/*Step 52
Replace the top margin of the h2 elements with 60px of top padding.*/
h2 {
   border-bottom: 4px solid #dfdfe2;
   margin-top: 0;
   padding-top: 60px;
}
/*Step 53
Add padding to the top and left of the .info elements, and set the other values to 0.*/
.info {
   padding: 20px 0 0 20px;
}
/*Step 54
Give the .formrow elements top margin, and left and right padding. The other padding values should be 0.

Then, increase the font size for all input elements.*/
.formrow {
   margin-top: 30px;
   padding: 0 15px;
}
input {
   font-size: 1rem;
}
/*Step 55
To make the first section look more inline, target only the input elements within .info elements, and set their width to 50%, and left-align their text.*/
/*Step 56
Target all label elements within .info elements, and set their width to 10%, and make it so they do not take up less than 55px.*/
/*Step 57
To align the input boxes with each other, create a new ruleset that targets all input and label elements within an .info element and set the display property to inline-block.

Also, align the label element's text to the right.*/
.info input, .info label {
   display: inline-block;
}
label {
   text-align: right;
}
.info input {
   width: 50%;
   text-align: left;
}
.info label {
   width: 10%;
   min-width: 55px;
}
/*Step 58
To neaten the .question-block elements, set the following CSS properties:

Example Code
text-align: left;
display: block;
width: 100%;
margin-top: 20px;
padding-top: 5px;*/
.question-block {
   text-align: left;
 display: block;
 width: 100%;
 margin-top: 20px;
 padding-top: 5px;
 }
 /*Step 59
Make the h3 elements appear as a higher priority, with the following CSS properties:

Example Code
margin-top: 5px;
padding-left: 15px;
font-size: 1.375rem;*/
h3 {
   margin-top: 5px;
 padding-left: 15px;
 font-size: 1.375rem;
 }
/*Step 34
To prevent unnecessary repetition, target the before pseudo-element of the h3 element, and give it a content property of "Question #".*/
h3::before {
   content: "Question #";
}
/*Step 60
It is useful to see the default border around the fieldset elements, during development. However, it might not be the style you want.

Remove the border and bottom padding on the .question elements.*/
.question {
   border: none;
   padding-bottom: 0;
 }
/*Step 26
The .sr-only text is still visible. There is a common pattern to visually hide text for only screen readers to read.

This pattern is to set the following CSS properties:

Example Code
position: absolute;
width: 1px;
height: 1px;
overflow: hidden;
clip: rect(0, 0, 0, 0);
clip-path: inset(50%);
white-space: nowrap;
Use the above to define the .sr-only CSS rule.*/
.sr-only {
   position: absolute;
   width: 1px;
   height: 1px;
   overflow: hidden;
   clip: rect(0, 0, 0, 0);
   clip-path: inset(50%);
   white-space: nowrap;
}